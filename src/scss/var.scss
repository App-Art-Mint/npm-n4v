@use 'sass:string';

// Variables
$lib: n4v !default;
$dash: #{'-'};
$pre: #{$lib}#{$dash};
$dot: #{'.'};
$hash: #{'#'};
$disabled: #{'[disabled]'};
$has-controls: #{'[aria-controls]'};
$has-expanded: #{'[aria-expanded]'};
$has-link: #{'[href]'};
$has-router-link: #{'[routerLink]'};
$has-id: #{'[id]'};
$not-tabbable: #{'[tabindex^="-"]'};
$tabbable: #{'[tabindex]'}#{neg($not-tabbable)};
$sub-menu-buttons: #{'button'}#{$has-controls};
$sub-menu: #{$sub-menu-buttons}#{' + ul'}#{$has-id};
$delay-base: 0 !default;
$delay-step: 100 !default;

// Maps
$delay: (
    instant: $delay-base + $delay-step * 0,
    fast: $delay-base + $delay-step * 1,
    med-fast: $delay-base + $delay-step * 2,
    default: $delay-base + $delay-step * 3,
    med-slow: $delay-base + $delay-step * 4,
    slow: $delay-base + $delay-step * 5
) !default;

$break: (
    xs: 480,
    sm: 768,
    md: 1024,
    lg: 1200,
    xl: 1440
) !default;

// Functions
@function prefix ($base) {
    @if (type-of($base) != 'string') {
        @error 'The prefix function requires a string value.';
    }

    $base: string.to-lower-case($base);

    @if (string.index($base, $pre) != 1) {
        $base: $pre + $base;
    }

    @return $base;
}

@function css-prefix ($base) {
    @if (type-of($base) != 'string') {
        @error 'The css-prefix function requires a string value.';
    }

    @while (string.index($base, $dash) == 1) {
        $base: string.slice($base, 2);
    }

    @return $dash + $dash + prefix($base);
}

@function css-var ($base) {
    @if (type-of($base) != 'string') {
        @error 'The css-var function requires a string value.';
    }

    @return var(css-prefix($base));
}

@function neg ($base) {
    @if (type-of($base) != 'string') {
        @error 'The neg function requires a string value.';
    }

    @return ':not(' + $base + ')';
}

@function class($base) {
    @if (type-of($base) != 'string') {
        @error 'The class function requires a string value.';
    }

    @return $dot + prefix($base);
}

@function id ($base) {
    @if (type-of($base) != 'string') {
        @error 'The id function requires a string value.';
    }

    @return $hash + prefix($base);
}

@function controls ($id) {
    @if (type-of($id) != 'string') {
        @error 'The controls function requires a string value.';
    }

    @return '[aria-controls=' + prefix($id) + ']';
}

@function expanded ($bool) {
    @if (type-of($bool) == 'string') {
        $bool: string.to-lower-case($bool);

        @if not($bool == 'true' or $bool == 'false') {
            @error 'The expanded function requires a boolean value.';
        }
    } @else if (type-of($bool) != 'bool') {
        @error 'The expanded function requires a boolean value.';
    }
    
    @return '[aria-expanded=' + $bool + ']';
}

@function ms ($val) {
    @if (type-of($val) != 'number') {
        @error 'The ms function requires a number value.';
    }

    @return $val * 1ms;
}

@function px ($val) {
    @if (type-of($val) != 'number') {
        @error 'The px function requires a number value.';
    }

    @return $val * 1px;
}

@function strip-unit($val) {
    @if (type-of($val) != 'number') {
        @error 'The strip-unit function requires a number value.';
    }

    @return math.div($val, $val * 0 + 1);
}

@function delay($key) {
    @if not(map-has-key($delay, $key)) {
        @error 'The delay function requires one of the following values: #{map-keys($delay)}';
    }

    @return ms(map-get($delay, $key));
}

@function break($key) {
    @if not(map-has-key($break, $key)) {
        @error 'The break function requires one of the following values: #{map-keys($break)}';
    }

    @return px(map-get($break, $key));
}

// Mixins
@mixin css-var ($key, $val) {
    #{css-prefix($key)}: #{$val};
}

@mixin css-var-ref ($key1, $key2) {
    @include css-var($key1, css-var($key2));
}

@mixin break ($min, $max:null) {
    @if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {
        @error 'The break mixin requires one or two of the following values: #{map-keys($break)}';
    }

    @if (map-has-key($break, $max)) {
        @media (min-width: break($min)) and (max-width: break($max)) {
            @content;
        }
    } @else {
        @media (min-width: break($min)) {
            @content;
        }
    }
}

@mixin fluid ($prop, $min-vw, $max-vw, $min-size, $max-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-size);
    $u4: unit($max-size);

    @if (type-of($prop) != 'string') {
        @error 'The fluid mixin requires a string for the $prop argument.';
    }
    @if not(type-of($u1) == 'string' and type-of($u2) == 'string' and type-of($u3) == 'string' and type-of($u4) == 'string') {
        @error 'The fluid mixin requires numbers for the width and size arguments.';
    }
    @if not($u1 == $u2 and $u1 == $u3 and $u1 == $u4) {
        @error 'The fluid mixin requires width and size arguments with the same units.';
    }

    & {
        #{$prop}: $min-size;
        @media (min-width: $min-vw) {
            #{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        }
        @media (min-width: $max-vw) {
            #{$prop}: $max-size;
        }
    }
}